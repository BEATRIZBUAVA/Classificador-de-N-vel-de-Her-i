// Vari치veis globais
let heroName = "";
let heroXP = 0;
let heroLevel = "";

// Elementos DOM
const heroForm = document.getElementById('heroForm');
const heroNameInput = document.getElementById('heroName');
const heroXPInput = document.getElementById('heroXP');
const resultContainer = document.getElementById('result');
const heroResult = document.getElementById('heroResult');
const levelBadge = document.getElementById('levelBadge');

// Event listener para o formul치rio
heroForm.addEventListener('submit', function(event) {
    event.preventDefault();
    classifyHero();
});

// Fun칞칚o principal para classificar o her칩i
function classifyHero() {
    // Capturar valores dos inputs (utilizando vari치veis)
    heroName = heroNameInput.value.trim();
    heroXP = parseInt(heroXPInput.value);
    
    // Valida칞칚o b치sica
    if (!heroName || isNaN(heroXP) || heroXP < 0) {
        alert('Por favor, preencha todos os campos corretamente!');
        return;
    }
    
    // Determinar o n칤vel usando estruturas de decis칚o
    heroLevel = determineLevel(heroXP);
    
    // Exibir resultado
    displayResult();
    
    // Opcional: Mostrar m칰ltiplos her칩is usando la칞os de repeti칞칚o
    addToHeroHistory();
}

// Fun칞칚o para determinar o n칤vel (estruturas de decis칚o)
function determineLevel(xp) {
    if (xp <= 1000) {
        return "Ferro";
    } else if (xp >= 1001 && xp <= 2000) {
        return "Bronze";
    } else if (xp >= 2001 && xp <= 5000) {
        return "Prata";
    } else if (xp >= 5001 && xp <= 7000) {
        return "Ouro";
    } else if (xp >= 7001 && xp <= 8000) {
        return "Platina";
    } else if (xp >= 8001 && xp <= 9000) {
        return "Ascendente";
    } else if (xp >= 9001 && xp <= 10000) {
        return "Imortal";
    } else if (xp >= 10001) {
        return "Radiante";
    }
}

// Fun칞칚o para exibir o resultado
function displayResult() {
    // Mensagem conforme especificado no desafio
    const message = `O Her칩i de nome ${heroName} est치 no n칤vel de ${heroLevel}`;
    
    heroResult.textContent = message;
    levelBadge.textContent = heroLevel;
    levelBadge.className = `level-badge ${heroLevel.toLowerCase()}`;
    
    // Mostrar container de resultado com anima칞칚o
    resultContainer.classList.remove('hidden');
    resultContainer.scrollIntoView({ behavior: 'smooth' });
}

// Array para armazenar hist칩rico de her칩is (usando vari치veis e operadores)
let heroHistory = [];

// Fun칞칚o para adicionar ao hist칩rico (demonstra uso de la칞os de repeti칞칚o)
function addToHeroHistory() {
    const hero = {
        name: heroName,
        xp: heroXP,
        level: heroLevel,
        timestamp: new Date().toLocaleString()
    };
    
    heroHistory.push(hero);
    
    // Demonstra칞칚o de la칞o de repeti칞칚o - atualizar console com hist칩rico
    console.log('=== HIST칍RICO DE HER칍IS ===');
    for (let i = 0; i < heroHistory.length; i++) {
        console.log(`${i + 1}. ${heroHistory[i].name} - ${heroHistory[i].xp} XP - N칤vel ${heroHistory[i].level} (${heroHistory[i].timestamp})`);
    }
}

// Fun칞칚o adicional para demonstrar mais uso de la칞os de repeti칞칚o
function simulateMultipleHeroes() {
    // Array com her칩is de exemplo
    const exampleHeroes = [
        { name: "Arthur", xp: 1500 },
        { name: "Lancelot", xp: 6500 },
        { name: "Merlin", xp: 9500 },
        { name: "Guinevere", xp: 12000 },
        { name: "Percival", xp: 800 }
    ];
    
    console.log('=== SIMULA칂츾O DE M칔LTIPLOS HER칍IS ===');
    
    // Usando la칞o for para processar m칰ltiplos her칩is
    for (let i = 0; i < exampleHeroes.length; i++) {
        const hero = exampleHeroes[i];
        const level = determineLevel(hero.xp);
        console.log(`O Her칩i de nome ${hero.name} est치 no n칤vel de ${level}`);
    }
    
    // Usando la칞o while para demonstrar outro tipo de repeti칞칚o
    let contador = 0;
    while (contador < exampleHeroes.length) {
        const hero = exampleHeroes[contador];
        // Operadores de compara칞칚o e l칩gicos
        if (hero.xp > 5000 && hero.xp < 10000) {
            console.log(`${hero.name} est치 em um n칤vel avan칞ado!`);
        }
        contador++; // Operador de incremento
    }
}

// Fun칞칚o para demonstrar operadores matem치ticos
function calculateHeroStats() {
    if (heroHistory.length === 0) return;
    
    let totalXP = 0;
    let maxXP = 0;
    let minXP = Infinity;
    
    // La칞o for para calcular estat칤sticas (usando operadores)
    for (let i = 0; i < heroHistory.length; i++) {
        const currentXP = heroHistory[i].xp;
        
        totalXP += currentXP; // Operador de adi칞칚o
        
        if (currentXP > maxXP) { // Operador de compara칞칚o
            maxXP = currentXP;
        }
        
        if (currentXP < minXP) { // Operador de compara칞칚o
            minXP = currentXP;
        }
    }
    
    const averageXP = totalXP / heroHistory.length; // Operador de divis칚o
    
    console.log('=== ESTAT칈STICAS DOS HER칍IS ===');
    console.log(`Total de her칩is: ${heroHistory.length}`);
    console.log(`XP total acumulado: ${totalXP}`);
    console.log(`XP m칠dio: ${averageXP.toFixed(2)}`);
    console.log(`Maior XP: ${maxXP}`);
    console.log(`Menor XP: ${minXP}`);
}

// Event listeners adicionais para demonstrar interatividade
heroXPInput.addEventListener('input', function() {
    const xp = parseInt(this.value);
    if (!isNaN(xp) && xp >= 0) {
        const previewLevel = determineLevel(xp);
        console.log(`Preview: ${xp} XP = N칤vel ${previewLevel}`);
    }
});

// Fun칞칚o para limpar o formul치rio
function clearForm() {
    heroNameInput.value = '';
    heroXPInput.value = '';
    resultContainer.classList.add('hidden');
}

// Adicionar bot칚o de limpar dinamicamente
window.addEventListener('load', function() {
    const clearButton = document.createElement('button');
    clearButton.textContent = 'Limpar Formul치rio';
    clearButton.type = 'button';
    clearButton.style.marginTop = '10px';
    clearButton.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
    clearButton.addEventListener('click', clearForm);
    
    heroForm.appendChild(clearButton);
    
    // Executar simula칞칚o de exemplo ao carregar a p치gina
    console.log('游꿡 Classificador de N칤vel de Her칩i carregado!');
    console.log('Abra o console para ver demonstra칞칫es dos conceitos de programa칞칚o.');
    
    // Demonstrar conceitos ap칩s um pequeno delay
    setTimeout(() => {
        simulateMultipleHeroes();
    }, 1000);
});

// Demonstra칞칚o adicional de estruturas condicionais mais complexas
function getAdvancedHeroInfo(name, xp) {
    let level = determineLevel(xp);
    let message = "";
    let nextLevelXP = 0;
    
    // Estruturas de decis칚o aninhadas e operadores l칩gicos
    if (level === "Ferro") {
        nextLevelXP = 1001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Bronze`;
    } else if (level === "Bronze") {
        nextLevelXP = 2001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Prata`;
    } else if (level === "Prata") {
        nextLevelXP = 5001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Ouro`;
    } else if (level === "Ouro") {
        nextLevelXP = 7001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Platina`;
    } else if (level === "Platina") {
        nextLevelXP = 8001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Ascendente`;
    } else if (level === "Ascendente") {
        nextLevelXP = 9001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Imortal`;
    } else if (level === "Imortal") {
        nextLevelXP = 10001 - xp;
        message = `${name} precisa de ${nextLevelXP} XP para alcan칞ar Radiante`;
    } else {
        message = `${name} j치 alcan칞ou o n칤vel m치ximo: Radiante!`;
    }
    
    return {
        level: level,
        message: message,
        nextLevelXP: nextLevelXP
    };
}
